# Generics en Go
27 de Septiembre 2023

Agustin Luques
HomeVision
luquesagustin@gmail.com

Nicol√°s Del Piano
HomeVision
ndel314@gmail.com

Nerdearla 2023

## Nosotros

- Software Engineers

.image assets/hv-logo.png 150 _
.caption [[https://homevision.co][HomeVision]]

- Experiencia en Go

.image assets/golang-logo.png 

## Agenda

1. Introducci√≥n
1. Sintaxis
1. Type Parameters en **Funciones**
1. Constraints Literals
1. Constraints Package
1. Tilde (`~`)
1. Type Inference
1. Type Parameters en **Tipos**
1. Limitaciones
1. Cu√°ndo s√≠ y cu√°ndo no usar Generics

## Introducci√≥n

Los _Generics_ (o _type parameters_) fueron introducidos en Go `v1.18`

.image assets/proposal.png _ 800

.caption [[https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md][Proposal]]

## Introducci√≥n

Pero... ¬øQu√© hab√≠a antes ü§î?

Desde la versi√≥n inicial de Go `1.0`, tenemos generics built-in (limitados)

```go
new len cap make close // funciones
map channel [] // tipos o constructores de tipos
```

.code presentation.go /^func PrintArrays/,/^}/

## Introducci√≥n

Podemos usar `interface{}` para representar cualquier valor y chequear el tipo concreto con _type assertions_

.code presentation.go /^func PrintValue/,/^}/

## Introducci√≥n

As√≠ es como en la `v1.18` deciden darle el mismo poder a los desarrolladores

.image assets/generics.png  _ 600

## Sintaxis

.image assets/pala.png _ 400

## Type Parameters en Funciones

**Problemas previo a Generics**

Funciones que hac√≠an escencialmente lo mismo para distintos tipos

Generaba c√≥digo repetido porque termin√°bamos copiando y pegando la misma definici√≥n para los distintos tipos

.code presentation.go /^func MapStrings/,/^}/

.code presentation.go /^func MapInts/,/^}/

## Type Parameters en Funciones

.image assets/pala.png _ 400

Ejercicio 1 - Type Parameters en Funciones

## Constraints Literals

Los tipos gen√©ricos no siempre son cualquier tipo

Se pueden restringir a un conjunto de tipos (o _type sets_)

Se usa el operador pipe (`|`) para "unir" tipos:

.code contraints-literals/literals.go /START1 OMIT/,/END1 OMIT/

.image assets/definitions.png 

## Constraints Literals

.code contraints-literals/literals.go /START2 OMIT/,/END2 OMIT/

## Constraints Literals

.code contraints-literals/literals.go /START3 OMIT/,/END3 OMIT/

.code contraints-literals/literals.go /START3-any OMIT/,/END3-any OMIT/

## Constraints Literals

.code contraints-literals/literals.go /START4 OMIT/,/END4 OMIT/

.image assets/type-sets.png _ 900

## Constraints Package

Definir constraints puede ser medio tedioso

Mas que nada aquellas constraints que suelen repetirse (`Integer`, `Ordered`, etc)

Es por eso que los desarrolladores incluyeron un paquete que define las m√°s comunes

.image assets/lazy-gopher.png _ 450

## Constraints Package

.image assets/pala.png _ 400

Ejercicio 2 - Constraints Package

## Tilde (~)

Uno de los nuevos operadores anunciados en Go `1.18` fue el operador ~

Fue agregado para que un tipo gen√©rico permita cualquier tipo subyacente dentro de una constraint

## Tilde (~)

```go
type ID int64

func Process[T int64](value T) {
  // ...
}

var id ID = 10
Process(id) // error ‚ùå: ID does not satisfy int64 (possibly missing ~ for int64 in int64)
```

## Tilde (~)

.image assets/pala.png _ 400

Ejercicio 3 - Tilde (~)

## Type Inference

Go puede inferir el tipo sin tener que especificarlo

**Partial inference**

.code type-inference/inference.go

## Type Inference Advanced

.image assets/pala.png _ 400

Ejercicio 5 - Type Inference Advanced

## Type Parameters en Tipos

Hay otro lugar donde vamos a ver generics, y es en definiciones de tipos o interfaces

```go
type Tupla[T any] struct {
  t1 T
  t2 T
}

tupla := Tupla[int]{
  t1: 1,
  t2: 2
}
```

## Type Parameters en Tipos

Tambi√©n podemos crear interfaces que contengan par√°metros de tipos:

```go
type Sumable[T any] interface {
  Sumar(T) T
}

type Entero int

func (e Entero) Sumar(b Entero) Entero {
  return e + b
}

func Suma[T Sumable[T]](a, b T) T {
	return a.Sumar(b)
}

/* Entero satisface la interfaz gen√©rica Sumable */
fmt.Println(Suma[Entero](1, 100)) // 101
```

## Type Parameters en Tipos

.image assets/pala.png _ 400

Ejercicio 4 - Generics Types

## Limitaciones

.code common-struct-fields/common_fields.go 

## Limitaciones

.image assets/github-issue-1.png _ 1000
.image assets/github-issue-2.png _ 1000
.caption [[https://github.com/golang/go/issues/48522][GitHub Issue]]

## Limitaciones

.image assets/go-1.18-doc.png _ 1000
.caption [[https://go.dev/doc/go1.18][Go v1.18]]

## M√°s Limitaciones

Una declaraci√≥n de alias de tipo no puede tener un par√°metro de tipo:

```go
type T[X, Y any] func(X) Y

type A = T[int, string] // OK ‚úÖ

type B[X any] = T[X, X] // Error: generic type cannot be alias ‚ùå
```

## M√°s Limitaciones

Actualmente los m√©todos no soportan _type parameters_

```go
type Moneda struct {
  valor int
}

func (m *Moneda) Valor[T ~int]() T {
  return m.valor // syntax error: method must have no type parameters ‚ùå
}
```

.caption [[https://github.com/golang/go/issues/49085][Github Issue]]

## M√°s Limitaciones

Las structs embebidas no pueden provenir de _type parameters_

```go
type Derived[Base any] struct {
	Base // Error: embedded field type cannot be a (pointer to a) type parameter
	x bool ‚ùå
}

## Cu√°ndo s√≠ y cu√°ndo no usar Generics

Funciones de prop√≥sito general

.code presentation.go /^func Map\[T1, T2 any\]/,/^}/

.image assets/gopher-ok.png _ 450

## Cu√°ndo s√≠ y cu√°ndo no usar Generics

Estructuras de datos de prop√≥sito general

.code presentation.go /START WHEN1 OMIT/,/END WHEN1 OMIT/

.image assets/gopher-ok.png _ 450

## Cu√°ndo s√≠ y cu√°ndo no usar Generics

Cuando no agrega valor, lo hace dif√≠cil de leer o menos performante.

O simplemente llamamos a un m√©todo del par√°metro

```
func ReadSome(r io.Reader) ([]byte, error) 

func ReadSome[T io.Reader](r T) ([]byte, error) 

```

.image assets/gopher-no.png _ 450

## Cu√°ndo s√≠ y cu√°ndo no usar Generics

Cuando la implementaci√≥n var√≠a seg√∫n el tipo

.code presentation.go /^func GetStringFrom/,/^}/

.image assets/gopher-no.png _ 250
