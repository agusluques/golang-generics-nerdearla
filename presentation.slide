# Generics en Go
27 de Septiembre 2023

Agustin Luques
HomeVision
luquesagustin@gmail.com

Nicolás del Piano
HomeVision
ndel314@gmail.com

## Nosotros

- Software Engineers

.image assets/hv-logo.png 150 _
.caption [[https://homevision.co][HomeVision]]

- Experiencia en Go

.image assets/golang-logo.png 

## Agenda

1. Introducción
2. Sintaxis
3. Type Parameters in **Functions**
4. Constraints Package
5. Constraints Literals
6. Tilde (`~`)
7. Type Parameters in **Types**
8. Type Inference

## Introducción

Los _Generics_ fueron introducidos en Go `v1.18`

**Antes de Generics**

Se podia utilizar `interface{}` or `any`

.code presentation.go /^func PrintValue/,/^}/

## Sintaxis

## Type Parameters in Functions

## Constraints Package

## Constraints Literals

.code 04-contraints-literals/literals.go /START1 OMIT/,/END1 OMIT/

## Constraints Literals

.code 04-contraints-literals/literals.go /START2 OMIT/,/END2 OMIT/

## Constraints Literals

.code 04-contraints-literals/literals.go /START3 OMIT/,/END3 OMIT/

## Constraints Literals

.code 04-contraints-literals/literals.go /START4 OMIT/,/END4 OMIT/

## Tilde (~)

## Type Parameters in Types

## Type Inference

Go puede inferir el tipo sin tener que especificarlo

**Partial inference**

.code 07-type-inference/inference.go

## Type Inference Advanced

## Known Issues

.code 09-common-struct-fields/common_fields.go 

.caption [[https://github.com/golang/go/issues/48522][Github Issue]]

## When to use Generics